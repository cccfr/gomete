// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cccfr/gomete/restapi/operations/audits"
	"github.com/cccfr/gomete/restapi/operations/barcodes"
	"github.com/cccfr/gomete/restapi/operations/denominations"
	"github.com/cccfr/gomete/restapi/operations/image"
	"github.com/cccfr/gomete/restapi/operations/products"
	"github.com/cccfr/gomete/restapi/operations/server"
	"github.com/cccfr/gomete/restapi/operations/users"
)

// NewSpaceMarketAPI creates a new SpaceMarket instance
func NewSpaceMarketAPI(spec *loads.Document) *SpaceMarketAPI {
	return &SpaceMarketAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,

		BinProducer:  runtime.ByteStreamProducer(),
		JSONProducer: runtime.JSONProducer(),

		BarcodesDeleteBarcodesIDHandler: barcodes.DeleteBarcodesIDHandlerFunc(func(params barcodes.DeleteBarcodesIDParams) middleware.Responder {
			return middleware.NotImplemented("operation barcodes.DeleteBarcodesID has not yet been implemented")
		}),
		DenominationsDeleteDenominationsIDHandler: denominations.DeleteDenominationsIDHandlerFunc(func(params denominations.DeleteDenominationsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation denominations.DeleteDenominationsID has not yet been implemented")
		}),
		ProductsDeleteProductsIDHandler: products.DeleteProductsIDHandlerFunc(func(params products.DeleteProductsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation products.DeleteProductsID has not yet been implemented")
		}),
		UsersDeleteUsersIDHandler: users.DeleteUsersIDHandlerFunc(func(params users.DeleteUsersIDParams) middleware.Responder {
			return middleware.NotImplemented("operation users.DeleteUsersID has not yet been implemented")
		}),
		AuditsGetAuditsHandler: audits.GetAuditsHandlerFunc(func(params audits.GetAuditsParams) middleware.Responder {
			return middleware.NotImplemented("operation audits.GetAudits has not yet been implemented")
		}),
		BarcodesGetBarcodesIDHandler: barcodes.GetBarcodesIDHandlerFunc(func(params barcodes.GetBarcodesIDParams) middleware.Responder {
			return middleware.NotImplemented("operation barcodes.GetBarcodesID has not yet been implemented")
		}),
		DenominationsGetDenominationsHandler: denominations.GetDenominationsHandlerFunc(func(params denominations.GetDenominationsParams) middleware.Responder {
			return middleware.NotImplemented("operation denominations.GetDenominations has not yet been implemented")
		}),
		DenominationsGetDenominationsIDHandler: denominations.GetDenominationsIDHandlerFunc(func(params denominations.GetDenominationsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation denominations.GetDenominationsID has not yet been implemented")
		}),
		ImageGetImagesHandler: image.GetImagesHandlerFunc(func(params image.GetImagesParams) middleware.Responder {
			return middleware.NotImplemented("operation image.GetImages has not yet been implemented")
		}),
		ImageGetImagesIDHandler: image.GetImagesIDHandlerFunc(func(params image.GetImagesIDParams) middleware.Responder {
			return middleware.NotImplemented("operation image.GetImagesID has not yet been implemented")
		}),
		ImageGetImagesIDImgHandler: image.GetImagesIDImgHandlerFunc(func(params image.GetImagesIDImgParams) middleware.Responder {
			return middleware.NotImplemented("operation image.GetImagesIDImg has not yet been implemented")
		}),
		ServerGetInfoHandler: server.GetInfoHandlerFunc(func(params server.GetInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation server.GetInfo has not yet been implemented")
		}),
		ProductsGetProductsHandler: products.GetProductsHandlerFunc(func(params products.GetProductsParams) middleware.Responder {
			return middleware.NotImplemented("operation products.GetProducts has not yet been implemented")
		}),
		ProductsGetProductsIDHandler: products.GetProductsIDHandlerFunc(func(params products.GetProductsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation products.GetProductsID has not yet been implemented")
		}),
		UsersGetUsersHandler: users.GetUsersHandlerFunc(func(params users.GetUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation users.GetUsers has not yet been implemented")
		}),
		UsersGetUsersBarcodeBarcodeHandler: users.GetUsersBarcodeBarcodeHandlerFunc(func(params users.GetUsersBarcodeBarcodeParams) middleware.Responder {
			return middleware.NotImplemented("operation users.GetUsersBarcodeBarcode has not yet been implemented")
		}),
		UsersGetUsersIDHandler: users.GetUsersIDHandlerFunc(func(params users.GetUsersIDParams) middleware.Responder {
			return middleware.NotImplemented("operation users.GetUsersID has not yet been implemented")
		}),
		UsersGetUsersStatsHandler: users.GetUsersStatsHandlerFunc(func(params users.GetUsersStatsParams) middleware.Responder {
			return middleware.NotImplemented("operation users.GetUsersStats has not yet been implemented")
		}),
		BarcodesPatchBarcodesIDHandler: barcodes.PatchBarcodesIDHandlerFunc(func(params barcodes.PatchBarcodesIDParams) middleware.Responder {
			return middleware.NotImplemented("operation barcodes.PatchBarcodesID has not yet been implemented")
		}),
		DenominationsPatchDenominationsIDHandler: denominations.PatchDenominationsIDHandlerFunc(func(params denominations.PatchDenominationsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation denominations.PatchDenominationsID has not yet been implemented")
		}),
		ProductsPatchProductsIDHandler: products.PatchProductsIDHandlerFunc(func(params products.PatchProductsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation products.PatchProductsID has not yet been implemented")
		}),
		UsersPatchUsersIDHandler: users.PatchUsersIDHandlerFunc(func(params users.PatchUsersIDParams) middleware.Responder {
			return middleware.NotImplemented("operation users.PatchUsersID has not yet been implemented")
		}),
		BarcodesPostBarcodesHandler: barcodes.PostBarcodesHandlerFunc(func(params barcodes.PostBarcodesParams) middleware.Responder {
			return middleware.NotImplemented("operation barcodes.PostBarcodes has not yet been implemented")
		}),
		DenominationsPostDenominationsHandler: denominations.PostDenominationsHandlerFunc(func(params denominations.PostDenominationsParams) middleware.Responder {
			return middleware.NotImplemented("operation denominations.PostDenominations has not yet been implemented")
		}),
		ImagePostImagesHandler: image.PostImagesHandlerFunc(func(params image.PostImagesParams) middleware.Responder {
			return middleware.NotImplemented("operation image.PostImages has not yet been implemented")
		}),
		ProductsPostProductsHandler: products.PostProductsHandlerFunc(func(params products.PostProductsParams) middleware.Responder {
			return middleware.NotImplemented("operation products.PostProducts has not yet been implemented")
		}),
		UsersPostUsersHandler: users.PostUsersHandlerFunc(func(params users.PostUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation users.PostUsers has not yet been implemented")
		}),
		UsersPostUsersIDBuyHandler: users.PostUsersIDBuyHandlerFunc(func(params users.PostUsersIDBuyParams) middleware.Responder {
			return middleware.NotImplemented("operation users.PostUsersIDBuy has not yet been implemented")
		}),
		UsersPostUsersIDBuyBarcodeHandler: users.PostUsersIDBuyBarcodeHandlerFunc(func(params users.PostUsersIDBuyBarcodeParams) middleware.Responder {
			return middleware.NotImplemented("operation users.PostUsersIDBuyBarcode has not yet been implemented")
		}),
		UsersPostUsersIDDepositHandler: users.PostUsersIDDepositHandlerFunc(func(params users.PostUsersIDDepositParams) middleware.Responder {
			return middleware.NotImplemented("operation users.PostUsersIDDeposit has not yet been implemented")
		}),
		UsersPostUsersIDSpendHandler: users.PostUsersIDSpendHandlerFunc(func(params users.PostUsersIDSpendParams) middleware.Responder {
			return middleware.NotImplemented("operation users.PostUsersIDSpend has not yet been implemented")
		}),
		UsersPostUsersIDTransferHandler: users.PostUsersIDTransferHandlerFunc(func(params users.PostUsersIDTransferParams) middleware.Responder {
			return middleware.NotImplemented("operation users.PostUsersIDTransfer has not yet been implemented")
		}),
	}
}

/*SpaceMarketAPI API for transactions */
type SpaceMarketAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for the following mime types:
	//   - multipart/form-data
	MultipartformConsumer runtime.Consumer

	// BinProducer registers a producer for the following mime types:
	//   - image/gif
	//   - image/jpeg
	//   - image/png
	BinProducer runtime.Producer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// BarcodesDeleteBarcodesIDHandler sets the operation handler for the delete barcodes ID operation
	BarcodesDeleteBarcodesIDHandler barcodes.DeleteBarcodesIDHandler
	// DenominationsDeleteDenominationsIDHandler sets the operation handler for the delete denominations ID operation
	DenominationsDeleteDenominationsIDHandler denominations.DeleteDenominationsIDHandler
	// ProductsDeleteProductsIDHandler sets the operation handler for the delete products ID operation
	ProductsDeleteProductsIDHandler products.DeleteProductsIDHandler
	// UsersDeleteUsersIDHandler sets the operation handler for the delete users ID operation
	UsersDeleteUsersIDHandler users.DeleteUsersIDHandler
	// AuditsGetAuditsHandler sets the operation handler for the get audits operation
	AuditsGetAuditsHandler audits.GetAuditsHandler
	// BarcodesGetBarcodesIDHandler sets the operation handler for the get barcodes ID operation
	BarcodesGetBarcodesIDHandler barcodes.GetBarcodesIDHandler
	// DenominationsGetDenominationsHandler sets the operation handler for the get denominations operation
	DenominationsGetDenominationsHandler denominations.GetDenominationsHandler
	// DenominationsGetDenominationsIDHandler sets the operation handler for the get denominations ID operation
	DenominationsGetDenominationsIDHandler denominations.GetDenominationsIDHandler
	// ImageGetImagesHandler sets the operation handler for the get images operation
	ImageGetImagesHandler image.GetImagesHandler
	// ImageGetImagesIDHandler sets the operation handler for the get images ID operation
	ImageGetImagesIDHandler image.GetImagesIDHandler
	// ImageGetImagesIDImgHandler sets the operation handler for the get images ID img operation
	ImageGetImagesIDImgHandler image.GetImagesIDImgHandler
	// ServerGetInfoHandler sets the operation handler for the get info operation
	ServerGetInfoHandler server.GetInfoHandler
	// ProductsGetProductsHandler sets the operation handler for the get products operation
	ProductsGetProductsHandler products.GetProductsHandler
	// ProductsGetProductsIDHandler sets the operation handler for the get products ID operation
	ProductsGetProductsIDHandler products.GetProductsIDHandler
	// UsersGetUsersHandler sets the operation handler for the get users operation
	UsersGetUsersHandler users.GetUsersHandler
	// UsersGetUsersBarcodeBarcodeHandler sets the operation handler for the get users barcode barcode operation
	UsersGetUsersBarcodeBarcodeHandler users.GetUsersBarcodeBarcodeHandler
	// UsersGetUsersIDHandler sets the operation handler for the get users ID operation
	UsersGetUsersIDHandler users.GetUsersIDHandler
	// UsersGetUsersStatsHandler sets the operation handler for the get users stats operation
	UsersGetUsersStatsHandler users.GetUsersStatsHandler
	// BarcodesPatchBarcodesIDHandler sets the operation handler for the patch barcodes ID operation
	BarcodesPatchBarcodesIDHandler barcodes.PatchBarcodesIDHandler
	// DenominationsPatchDenominationsIDHandler sets the operation handler for the patch denominations ID operation
	DenominationsPatchDenominationsIDHandler denominations.PatchDenominationsIDHandler
	// ProductsPatchProductsIDHandler sets the operation handler for the patch products ID operation
	ProductsPatchProductsIDHandler products.PatchProductsIDHandler
	// UsersPatchUsersIDHandler sets the operation handler for the patch users ID operation
	UsersPatchUsersIDHandler users.PatchUsersIDHandler
	// BarcodesPostBarcodesHandler sets the operation handler for the post barcodes operation
	BarcodesPostBarcodesHandler barcodes.PostBarcodesHandler
	// DenominationsPostDenominationsHandler sets the operation handler for the post denominations operation
	DenominationsPostDenominationsHandler denominations.PostDenominationsHandler
	// ImagePostImagesHandler sets the operation handler for the post images operation
	ImagePostImagesHandler image.PostImagesHandler
	// ProductsPostProductsHandler sets the operation handler for the post products operation
	ProductsPostProductsHandler products.PostProductsHandler
	// UsersPostUsersHandler sets the operation handler for the post users operation
	UsersPostUsersHandler users.PostUsersHandler
	// UsersPostUsersIDBuyHandler sets the operation handler for the post users ID buy operation
	UsersPostUsersIDBuyHandler users.PostUsersIDBuyHandler
	// UsersPostUsersIDBuyBarcodeHandler sets the operation handler for the post users ID buy barcode operation
	UsersPostUsersIDBuyBarcodeHandler users.PostUsersIDBuyBarcodeHandler
	// UsersPostUsersIDDepositHandler sets the operation handler for the post users ID deposit operation
	UsersPostUsersIDDepositHandler users.PostUsersIDDepositHandler
	// UsersPostUsersIDSpendHandler sets the operation handler for the post users ID spend operation
	UsersPostUsersIDSpendHandler users.PostUsersIDSpendHandler
	// UsersPostUsersIDTransferHandler sets the operation handler for the post users ID transfer operation
	UsersPostUsersIDTransferHandler users.PostUsersIDTransferHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *SpaceMarketAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *SpaceMarketAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *SpaceMarketAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *SpaceMarketAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *SpaceMarketAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *SpaceMarketAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *SpaceMarketAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the SpaceMarketAPI
func (o *SpaceMarketAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}
	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BarcodesDeleteBarcodesIDHandler == nil {
		unregistered = append(unregistered, "barcodes.DeleteBarcodesIDHandler")
	}
	if o.DenominationsDeleteDenominationsIDHandler == nil {
		unregistered = append(unregistered, "denominations.DeleteDenominationsIDHandler")
	}
	if o.ProductsDeleteProductsIDHandler == nil {
		unregistered = append(unregistered, "products.DeleteProductsIDHandler")
	}
	if o.UsersDeleteUsersIDHandler == nil {
		unregistered = append(unregistered, "users.DeleteUsersIDHandler")
	}
	if o.AuditsGetAuditsHandler == nil {
		unregistered = append(unregistered, "audits.GetAuditsHandler")
	}
	if o.BarcodesGetBarcodesIDHandler == nil {
		unregistered = append(unregistered, "barcodes.GetBarcodesIDHandler")
	}
	if o.DenominationsGetDenominationsHandler == nil {
		unregistered = append(unregistered, "denominations.GetDenominationsHandler")
	}
	if o.DenominationsGetDenominationsIDHandler == nil {
		unregistered = append(unregistered, "denominations.GetDenominationsIDHandler")
	}
	if o.ImageGetImagesHandler == nil {
		unregistered = append(unregistered, "image.GetImagesHandler")
	}
	if o.ImageGetImagesIDHandler == nil {
		unregistered = append(unregistered, "image.GetImagesIDHandler")
	}
	if o.ImageGetImagesIDImgHandler == nil {
		unregistered = append(unregistered, "image.GetImagesIDImgHandler")
	}
	if o.ServerGetInfoHandler == nil {
		unregistered = append(unregistered, "server.GetInfoHandler")
	}
	if o.ProductsGetProductsHandler == nil {
		unregistered = append(unregistered, "products.GetProductsHandler")
	}
	if o.ProductsGetProductsIDHandler == nil {
		unregistered = append(unregistered, "products.GetProductsIDHandler")
	}
	if o.UsersGetUsersHandler == nil {
		unregistered = append(unregistered, "users.GetUsersHandler")
	}
	if o.UsersGetUsersBarcodeBarcodeHandler == nil {
		unregistered = append(unregistered, "users.GetUsersBarcodeBarcodeHandler")
	}
	if o.UsersGetUsersIDHandler == nil {
		unregistered = append(unregistered, "users.GetUsersIDHandler")
	}
	if o.UsersGetUsersStatsHandler == nil {
		unregistered = append(unregistered, "users.GetUsersStatsHandler")
	}
	if o.BarcodesPatchBarcodesIDHandler == nil {
		unregistered = append(unregistered, "barcodes.PatchBarcodesIDHandler")
	}
	if o.DenominationsPatchDenominationsIDHandler == nil {
		unregistered = append(unregistered, "denominations.PatchDenominationsIDHandler")
	}
	if o.ProductsPatchProductsIDHandler == nil {
		unregistered = append(unregistered, "products.PatchProductsIDHandler")
	}
	if o.UsersPatchUsersIDHandler == nil {
		unregistered = append(unregistered, "users.PatchUsersIDHandler")
	}
	if o.BarcodesPostBarcodesHandler == nil {
		unregistered = append(unregistered, "barcodes.PostBarcodesHandler")
	}
	if o.DenominationsPostDenominationsHandler == nil {
		unregistered = append(unregistered, "denominations.PostDenominationsHandler")
	}
	if o.ImagePostImagesHandler == nil {
		unregistered = append(unregistered, "image.PostImagesHandler")
	}
	if o.ProductsPostProductsHandler == nil {
		unregistered = append(unregistered, "products.PostProductsHandler")
	}
	if o.UsersPostUsersHandler == nil {
		unregistered = append(unregistered, "users.PostUsersHandler")
	}
	if o.UsersPostUsersIDBuyHandler == nil {
		unregistered = append(unregistered, "users.PostUsersIDBuyHandler")
	}
	if o.UsersPostUsersIDBuyBarcodeHandler == nil {
		unregistered = append(unregistered, "users.PostUsersIDBuyBarcodeHandler")
	}
	if o.UsersPostUsersIDDepositHandler == nil {
		unregistered = append(unregistered, "users.PostUsersIDDepositHandler")
	}
	if o.UsersPostUsersIDSpendHandler == nil {
		unregistered = append(unregistered, "users.PostUsersIDSpendHandler")
	}
	if o.UsersPostUsersIDTransferHandler == nil {
		unregistered = append(unregistered, "users.PostUsersIDTransferHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *SpaceMarketAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *SpaceMarketAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *SpaceMarketAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *SpaceMarketAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *SpaceMarketAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "image/gif":
			result["image/gif"] = o.BinProducer
		case "image/jpeg":
			result["image/jpeg"] = o.BinProducer
		case "image/png":
			result["image/png"] = o.BinProducer
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *SpaceMarketAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the space market API
func (o *SpaceMarketAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *SpaceMarketAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/barcodes/{id}"] = barcodes.NewDeleteBarcodesID(o.context, o.BarcodesDeleteBarcodesIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/denominations/{id}"] = denominations.NewDeleteDenominationsID(o.context, o.DenominationsDeleteDenominationsIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/products/{id}"] = products.NewDeleteProductsID(o.context, o.ProductsDeleteProductsIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{id}"] = users.NewDeleteUsersID(o.context, o.UsersDeleteUsersIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/audits"] = audits.NewGetAudits(o.context, o.AuditsGetAuditsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/barcodes/{id}"] = barcodes.NewGetBarcodesID(o.context, o.BarcodesGetBarcodesIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/denominations"] = denominations.NewGetDenominations(o.context, o.DenominationsGetDenominationsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/denominations/{id}"] = denominations.NewGetDenominationsID(o.context, o.DenominationsGetDenominationsIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/images"] = image.NewGetImages(o.context, o.ImageGetImagesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/images/{id}"] = image.NewGetImagesID(o.context, o.ImageGetImagesIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/images/{id}/img"] = image.NewGetImagesIDImg(o.context, o.ImageGetImagesIDImgHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/info"] = server.NewGetInfo(o.context, o.ServerGetInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/products"] = products.NewGetProducts(o.context, o.ProductsGetProductsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/products/{id}"] = products.NewGetProductsID(o.context, o.ProductsGetProductsIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = users.NewGetUsers(o.context, o.UsersGetUsersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/barcode/{barcode}"] = users.NewGetUsersBarcodeBarcode(o.context, o.UsersGetUsersBarcodeBarcodeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{id}"] = users.NewGetUsersID(o.context, o.UsersGetUsersIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/stats"] = users.NewGetUsersStats(o.context, o.UsersGetUsersStatsHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/barcodes/{id}"] = barcodes.NewPatchBarcodesID(o.context, o.BarcodesPatchBarcodesIDHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/denominations/{id}"] = denominations.NewPatchDenominationsID(o.context, o.DenominationsPatchDenominationsIDHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/products/{id}"] = products.NewPatchProductsID(o.context, o.ProductsPatchProductsIDHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/users/{id}"] = users.NewPatchUsersID(o.context, o.UsersPatchUsersIDHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/barcodes"] = barcodes.NewPostBarcodes(o.context, o.BarcodesPostBarcodesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/denominations"] = denominations.NewPostDenominations(o.context, o.DenominationsPostDenominationsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/images"] = image.NewPostImages(o.context, o.ImagePostImagesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/products"] = products.NewPostProducts(o.context, o.ProductsPostProductsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users"] = users.NewPostUsers(o.context, o.UsersPostUsersHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{id}/buy"] = users.NewPostUsersIDBuy(o.context, o.UsersPostUsersIDBuyHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{id}/buy/barcode"] = users.NewPostUsersIDBuyBarcode(o.context, o.UsersPostUsersIDBuyBarcodeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{id}/deposit"] = users.NewPostUsersIDDeposit(o.context, o.UsersPostUsersIDDepositHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{id}/spend"] = users.NewPostUsersIDSpend(o.context, o.UsersPostUsersIDSpendHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{id}/transfer"] = users.NewPostUsersIDTransfer(o.context, o.UsersPostUsersIDTransferHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *SpaceMarketAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *SpaceMarketAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *SpaceMarketAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *SpaceMarketAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *SpaceMarketAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}

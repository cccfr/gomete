// Code generated by go-swagger; DO NOT EDIT.

package barcodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostBarcodesHandlerFunc turns a function with the right signature into a post barcodes handler
type PostBarcodesHandlerFunc func(PostBarcodesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostBarcodesHandlerFunc) Handle(params PostBarcodesParams) middleware.Responder {
	return fn(params)
}

// PostBarcodesHandler interface for that can handle valid post barcodes params
type PostBarcodesHandler interface {
	Handle(PostBarcodesParams) middleware.Responder
}

// NewPostBarcodes creates a new http.Handler for the post barcodes operation
func NewPostBarcodes(ctx *middleware.Context, handler PostBarcodesHandler) *PostBarcodes {
	return &PostBarcodes{Context: ctx, Handler: handler}
}

/*PostBarcodes swagger:route POST /barcodes/ barcodes postBarcodes

create a new barcode

*/
type PostBarcodes struct {
	Context *middleware.Context
	Handler PostBarcodesHandler
}

func (o *PostBarcodes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostBarcodesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostBarcodesBody post barcodes body
//
// swagger:model PostBarcodesBody
type PostBarcodesBody struct {

	// barcode
	Barcode string `json:"barcode,omitempty"`

	// id of linked object (product or user)
	Linked int64 `json:"linked,omitempty"`

	// product or user
	Type string `json:"type,omitempty"`
}

// Validate validates this post barcodes body
func (o *PostBarcodesBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostBarcodesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBarcodesBody) UnmarshalBinary(b []byte) error {
	var res PostBarcodesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

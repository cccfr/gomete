// Code generated by go-swagger; DO NOT EDIT.

package audits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAuditsHandlerFunc turns a function with the right signature into a get audits handler
type GetAuditsHandlerFunc func(GetAuditsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAuditsHandlerFunc) Handle(params GetAuditsParams) middleware.Responder {
	return fn(params)
}

// GetAuditsHandler interface for that can handle valid get audits params
type GetAuditsHandler interface {
	Handle(GetAuditsParams) middleware.Responder
}

// NewGetAudits creates a new http.Handler for the get audits operation
func NewGetAudits(ctx *middleware.Context, handler GetAuditsHandler) *GetAudits {
	return &GetAudits{Context: ctx, Handler: handler}
}

/*GetAudits swagger:route GET /audits/ audits getAudits

statistics about previous transactions

statistics about previous transactions

*/
type GetAudits struct {
	Context *middleware.Context
	Handler GetAuditsHandler
}

func (o *GetAudits) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAuditsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AuditsItems0 audits items0
//
// swagger:model AuditsItems0
type AuditsItems0 struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// difference
	Difference int64 `json:"difference,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// product
	Product int64 `json:"product,omitempty"`
}

// Validate validates this audits items0
func (o *AuditsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AuditsItems0) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AuditsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuditsItems0) UnmarshalBinary(b []byte) error {
	var res AuditsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetAuditsOKBody get audits o k body
//
// swagger:model GetAuditsOKBody
type GetAuditsOKBody struct {

	// audits
	// Required: true
	Audits []*AuditsItems0 `json:"audits"`

	// as cents
	// Required: true
	DepositsSum *int64 `json:"deposits_sum"`

	// as cents
	// Required: true
	PaymentsSum *int64 `json:"payments_sum"`

	// sum as cents
	// Required: true
	Sum *int64 `json:"sum"`
}

// Validate validates this get audits o k body
func (o *GetAuditsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAudits(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDepositsSum(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentsSum(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAuditsOKBody) validateAudits(formats strfmt.Registry) error {

	if err := validate.Required("getAuditsOK"+"."+"audits", "body", o.Audits); err != nil {
		return err
	}

	for i := 0; i < len(o.Audits); i++ {
		if swag.IsZero(o.Audits[i]) { // not required
			continue
		}

		if o.Audits[i] != nil {
			if err := o.Audits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAuditsOK" + "." + "audits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetAuditsOKBody) validateDepositsSum(formats strfmt.Registry) error {

	if err := validate.Required("getAuditsOK"+"."+"deposits_sum", "body", o.DepositsSum); err != nil {
		return err
	}

	return nil
}

func (o *GetAuditsOKBody) validatePaymentsSum(formats strfmt.Registry) error {

	if err := validate.Required("getAuditsOK"+"."+"payments_sum", "body", o.PaymentsSum); err != nil {
		return err
	}

	return nil
}

func (o *GetAuditsOKBody) validateSum(formats strfmt.Registry) error {

	if err := validate.Required("getAuditsOK"+"."+"sum", "body", o.Sum); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAuditsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAuditsOKBody) UnmarshalBinary(b []byte) error {
	var res GetAuditsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

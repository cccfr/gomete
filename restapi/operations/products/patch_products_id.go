// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PatchProductsIDHandlerFunc turns a function with the right signature into a patch products ID handler
type PatchProductsIDHandlerFunc func(PatchProductsIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchProductsIDHandlerFunc) Handle(params PatchProductsIDParams) middleware.Responder {
	return fn(params)
}

// PatchProductsIDHandler interface for that can handle valid patch products ID params
type PatchProductsIDHandler interface {
	Handle(PatchProductsIDParams) middleware.Responder
}

// NewPatchProductsID creates a new http.Handler for the patch products ID operation
func NewPatchProductsID(ctx *middleware.Context, handler PatchProductsIDHandler) *PatchProductsID {
	return &PatchProductsID{Context: ctx, Handler: handler}
}

/*PatchProductsID swagger:route PATCH /products/{id}/ products patchProductsId

edits specific product

*/
type PatchProductsID struct {
	Context *middleware.Context
	Handler PatchProductsIDHandler
}

func (o *PatchProductsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchProductsIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatchProductsIDBody patch products ID body
//
// swagger:model PatchProductsIDBody
type PatchProductsIDBody struct {

	// active
	Active bool `json:"active,omitempty"`

	// alcohol
	Alcohol int64 `json:"alcohol,omitempty"`

	// caffeine
	Caffeine int64 `json:"caffeine,omitempty"`

	// image
	Image int64 `json:"image,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// price
	Price int64 `json:"price,omitempty"`
}

// Validate validates this patch products ID body
func (o *PatchProductsIDBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchProductsIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchProductsIDBody) UnmarshalBinary(b []byte) error {
	var res PatchProductsIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

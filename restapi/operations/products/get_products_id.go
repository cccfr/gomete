// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetProductsIDHandlerFunc turns a function with the right signature into a get products ID handler
type GetProductsIDHandlerFunc func(GetProductsIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProductsIDHandlerFunc) Handle(params GetProductsIDParams) middleware.Responder {
	return fn(params)
}

// GetProductsIDHandler interface for that can handle valid get products ID params
type GetProductsIDHandler interface {
	Handle(GetProductsIDParams) middleware.Responder
}

// NewGetProductsID creates a new http.Handler for the get products ID operation
func NewGetProductsID(ctx *middleware.Context, handler GetProductsIDHandler) *GetProductsID {
	return &GetProductsID{Context: ctx, Handler: handler}
}

/*GetProductsID swagger:route GET /products/{id}/ products getProductsId

returns specific product

*/
type GetProductsID struct {
	Context *middleware.Context
	Handler GetProductsIDHandler
}

func (o *GetProductsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetProductsIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostProductsHandlerFunc turns a function with the right signature into a post products handler
type PostProductsHandlerFunc func(PostProductsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostProductsHandlerFunc) Handle(params PostProductsParams) middleware.Responder {
	return fn(params)
}

// PostProductsHandler interface for that can handle valid post products params
type PostProductsHandler interface {
	Handle(PostProductsParams) middleware.Responder
}

// NewPostProducts creates a new http.Handler for the post products operation
func NewPostProducts(ctx *middleware.Context, handler PostProductsHandler) *PostProducts {
	return &PostProducts{Context: ctx, Handler: handler}
}

/*PostProducts swagger:route POST /products/ products postProducts

creates a new product

*/
type PostProducts struct {
	Context *middleware.Context
	Handler PostProductsHandler
}

func (o *PostProducts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostProductsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostProductsBody post products body
//
// swagger:model PostProductsBody
type PostProductsBody struct {

	// active
	Active *bool `json:"active,omitempty"`

	// vol % alcohol without decimal seperator and one decimal place
	Alcohol int64 `json:"alcohol,omitempty"`

	// mg of caffeine per 100 ml/mg/unit
	Caffeine int64 `json:"caffeine,omitempty"`

	// energy per 100g / 100ml
	Energy int64 `json:"energy,omitempty"`

	// image
	Image int64 `json:"image,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// price
	Price *int64 `json:"price,omitempty"`

	// g sugar per 100g / 100ml with one deciaml place
	Sugar int64 `json:"sugar,omitempty"`
}

// Validate validates this post products body
func (o *PostProductsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostProductsBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("product"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostProductsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostProductsBody) UnmarshalBinary(b []byte) error {
	var res PostProductsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostUsersIDBuyHandlerFunc turns a function with the right signature into a post users ID buy handler
type PostUsersIDBuyHandlerFunc func(PostUsersIDBuyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUsersIDBuyHandlerFunc) Handle(params PostUsersIDBuyParams) middleware.Responder {
	return fn(params)
}

// PostUsersIDBuyHandler interface for that can handle valid post users ID buy params
type PostUsersIDBuyHandler interface {
	Handle(PostUsersIDBuyParams) middleware.Responder
}

// NewPostUsersIDBuy creates a new http.Handler for the post users ID buy operation
func NewPostUsersIDBuy(ctx *middleware.Context, handler PostUsersIDBuyHandler) *PostUsersIDBuy {
	return &PostUsersIDBuy{Context: ctx, Handler: handler}
}

/*PostUsersIDBuy swagger:route POST /users/{id}/buy/ users postUsersIdBuy

buys product with id product from user with id

*/
type PostUsersIDBuy struct {
	Context *middleware.Context
	Handler PostUsersIDBuyHandler
}

func (o *PostUsersIDBuy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostUsersIDBuyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

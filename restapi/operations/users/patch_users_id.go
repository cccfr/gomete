// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchUsersIDHandlerFunc turns a function with the right signature into a patch users ID handler
type PatchUsersIDHandlerFunc func(PatchUsersIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchUsersIDHandlerFunc) Handle(params PatchUsersIDParams) middleware.Responder {
	return fn(params)
}

// PatchUsersIDHandler interface for that can handle valid patch users ID params
type PatchUsersIDHandler interface {
	Handle(PatchUsersIDParams) middleware.Responder
}

// NewPatchUsersID creates a new http.Handler for the patch users ID operation
func NewPatchUsersID(ctx *middleware.Context, handler PatchUsersIDHandler) *PatchUsersID {
	return &PatchUsersID{Context: ctx, Handler: handler}
}

/*PatchUsersID swagger:route PATCH /users/{id}/ users patchUsersId

edits specific user

*/
type PatchUsersID struct {
	Context *middleware.Context
	Handler PatchUsersIDHandler
}

func (o *PatchUsersID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchUsersIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatchUsersIDBody patch users ID body
//
// swagger:model PatchUsersIDBody
type PatchUsersIDBody struct {

	// active
	Active bool `json:"active,omitempty"`

	// audit
	Audit bool `json:"audit,omitempty"`

	// avatar
	Avatar int64 `json:"avatar,omitempty"`

	// in cents
	Balance int64 `json:"balance,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// redirect
	Redirect bool `json:"redirect,omitempty"`
}

// Validate validates this patch users ID body
func (o *PatchUsersIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchUsersIDBody) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("user"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchUsersIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchUsersIDBody) UnmarshalBinary(b []byte) error {
	var res PatchUsersIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

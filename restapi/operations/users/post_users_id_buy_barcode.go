// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostUsersIDBuyBarcodeHandlerFunc turns a function with the right signature into a post users ID buy barcode handler
type PostUsersIDBuyBarcodeHandlerFunc func(PostUsersIDBuyBarcodeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUsersIDBuyBarcodeHandlerFunc) Handle(params PostUsersIDBuyBarcodeParams) middleware.Responder {
	return fn(params)
}

// PostUsersIDBuyBarcodeHandler interface for that can handle valid post users ID buy barcode params
type PostUsersIDBuyBarcodeHandler interface {
	Handle(PostUsersIDBuyBarcodeParams) middleware.Responder
}

// NewPostUsersIDBuyBarcode creates a new http.Handler for the post users ID buy barcode operation
func NewPostUsersIDBuyBarcode(ctx *middleware.Context, handler PostUsersIDBuyBarcodeHandler) *PostUsersIDBuyBarcode {
	return &PostUsersIDBuyBarcode{Context: ctx, Handler: handler}
}

/*PostUsersIDBuyBarcode swagger:route POST /users/{id}/buy/barcode/ users postUsersIdBuyBarcode

buys product with barcode for user with id

*/
type PostUsersIDBuyBarcode struct {
	Context *middleware.Context
	Handler PostUsersIDBuyBarcodeHandler
}

func (o *PostUsersIDBuyBarcode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostUsersIDBuyBarcodeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostUsersHandlerFunc turns a function with the right signature into a post users handler
type PostUsersHandlerFunc func(PostUsersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUsersHandlerFunc) Handle(params PostUsersParams) middleware.Responder {
	return fn(params)
}

// PostUsersHandler interface for that can handle valid post users params
type PostUsersHandler interface {
	Handle(PostUsersParams) middleware.Responder
}

// NewPostUsers creates a new http.Handler for the post users operation
func NewPostUsers(ctx *middleware.Context, handler PostUsersHandler) *PostUsers {
	return &PostUsers{Context: ctx, Handler: handler}
}

/*PostUsers swagger:route POST /users/ users postUsers

creates new User

*/
type PostUsers struct {
	Context *middleware.Context
	Handler PostUsersHandler
}

func (o *PostUsers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostUsersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostUsersBody post users body
//
// swagger:model PostUsersBody
type PostUsersBody struct {

	// active
	Active *bool `json:"active,omitempty"`

	// audit
	Audit *bool `json:"audit,omitempty"`

	// avatar
	Avatar int64 `json:"avatar,omitempty"`

	// in cents
	Balance int64 `json:"balance,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// redirect
	Redirect *bool `json:"redirect,omitempty"`
}

// Validate validates this post users body
func (o *PostUsersBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostUsersBody) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("user"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostUsersBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("user"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostUsersBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUsersBody) UnmarshalBinary(b []byte) error {
	var res PostUsersBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

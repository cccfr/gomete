// Code generated by go-swagger; DO NOT EDIT.

package denominations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetDenominationsIDHandlerFunc turns a function with the right signature into a get denominations ID handler
type GetDenominationsIDHandlerFunc func(GetDenominationsIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDenominationsIDHandlerFunc) Handle(params GetDenominationsIDParams) middleware.Responder {
	return fn(params)
}

// GetDenominationsIDHandler interface for that can handle valid get denominations ID params
type GetDenominationsIDHandler interface {
	Handle(GetDenominationsIDParams) middleware.Responder
}

// NewGetDenominationsID creates a new http.Handler for the get denominations ID operation
func NewGetDenominationsID(ctx *middleware.Context, handler GetDenominationsIDHandler) *GetDenominationsID {
	return &GetDenominationsID{Context: ctx, Handler: handler}
}

/*GetDenominationsID swagger:route GET /denominations/{id}/ denominations getDenominationsId

get details of given denomination

foobar

*/
type GetDenominationsID struct {
	Context *middleware.Context
	Handler GetDenominationsIDHandler
}

func (o *GetDenominationsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetDenominationsIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
